/* ==========================================================================
   COMPONENTS / TILE
   ========================================================================== */

// Tile settings
$tile-padding: $global-spacing-unit-small !default;
$tile-border-width: 5px !default;
$tile-border-colour: rgba(color(white), 0.3) !default;
$tile-animation-speed: $global-animation-speed;
$tile-animation-speed-slow: $global-animation-speed-slow;
$tile-shadow: $global-shadow !default;
$tile-arrow-size: 22px !default;
$tile-arrow-color: color(white);
$tile-shadow-color: rgba(160, 160, 160, 0.5);
$tile-gradient-default: "small";
$tile-gradient-default-hover: "large";

/**
 * Array of brands to generate specific themes for tile hover effects.
 * By default no themes are generated, to include themes overwrite the
 * `$included-tile-themes` array (see example)
 *
 * Example usage:
 * $included-tile-themes: "sky-1", "sky-arts", "sky-sports";
 *
 * Apply relevant class (ie `.c-tile--sky-1) to the `.c-tile` element or to a
 * parent element to apply to all nested tiles.
 *
 */

$included-tile-themes: "sky-1", "sky-account", "sky-atlantic", "sky-arts", "sky-box-sets", "sky-cinema", "sky-kids", "sky-living", "sky-news", "sky-sports", "sky-store" !default;

/**
 * The base of the tile; provides the glass "border" and shadow.
 *
 * The `has-focus` state provides keyboard focus styles for accessiblity.
 *
 * Also provides selected state, which gives a triangle arrowhead marker between
 * The tile and it's panel.
 *
 * 1. Forces tile markers to sit above corresponding panels
 */
.c-tile {
  position: relative;
  background-color: $tile-border-colour;
  box-shadow: $tile-shadow;
  padding: $tile-border-width;
  margin-bottom: $global-spacing-unit;
  will-change: transform;
  z-index: 10; /* [1] */

  &.has-focus {
    box-shadow: 1px 1px 14px 4px rgba(color(highlight), 0.5);
  }

  &.is-selected {
    /**
     * Arrow markers to signify panel relationship.
     *
     * 1. Positions the marker between tile and panel
     * 2. Need to take off an extra pixel here to allow for browser rendering/
     *    rounding quirks.
     * 3. Rotate 45deg to allow it to mask the panel gradient and look like a
     *    notch in the panel (webkit placed after to prevent render quirk)
     * 4. Box-shadow that matches the panel background color to smooth the
     *    shadow transition
     * 5. Inset box-shadow that is offset to be visible only on the top edges
     */
    &::before,
    &::after {
      display: block;
      content: "";
      position: absolute;  /* [1] */
      bottom: -$global-spacing-unit - ($tile-arrow-size/2) - 1px; /* [1, 2] */
      left: 50%;  /* [1] */
      width: $tile-arrow-size;
      height: $tile-arrow-size;
      margin-left: -$tile-arrow-size/2; /* [1] */
      -ms-transform: rotate(45deg); /* [3] */
      transform: rotate(45deg); /* [3] */
      -webkit-transform: translate3d(0, 0, 0) rotate(45deg); /* [3] */
    }

    &::before {
      box-shadow: 5px 5px 8px $tile-arrow-color; /* [4] */
    }

    &::after {
      background-color: $tile-arrow-color;
      box-shadow: inset $tile-arrow-size/2 $tile-arrow-size/2 $tile-arrow-size/2 (-$tile-arrow-size / 2) #9f9f9f; /* [5] */
    }
  }

  &.c-tile--dark.is-selected {
    &::before {
      box-shadow: 5px 5px 8px color(ui-dark); /* [4] */
    }

    &::after {
      background-color: color(ui-dark);
      box-shadow: inset $tile-arrow-size/2 $tile-arrow-size/2 $tile-arrow-size/2 (-$tile-arrow-size / 2) color(black); /* [5] */
    }
  }
}

/**
 * The inner container of the tile provides the background gradient and extra
 * positioning for square tiles
 */
.c-tile__content {
  position: relative;
  overflow: hidden; // Defensively clip overflowing text that can't be handled because of absolute positioning

  .c-tile--square & {
    position: absolute;
    top: $tile-border-width;
    right: $tile-border-width;
    bottom: $tile-border-width;
    left: $tile-border-width;
  }

  /**
   * Set position to static below medium on collapsable tiles
   */
  .c-tile--collapsable & {
    @include mq($until: medium) {
      position: static;
    }
  }

  > :last-child {
    margin-bottom: 0;
  }

}

/**
 * The body/copy container for the tile; This should be applied to any content
 * which doesn't sit flush to the edge of the tile.
 */
.c-tile__body {
  height: 100%;
  padding: $tile-padding;
  position: relative;
  width: 100%;

  > :last-child {
    margin-bottom: 0;
  }

  /**
   * Overlap and stretch body to fit full height on full tiles
   */
  .c-tile--full & {
    position: absolute;
    height: 100%;
    top: 0;
  }
}

/* Links
  =========================================== */

/**
 * Tiles can have links, just wrap the `.c-tile__content` with a `a.c-tile__link`
 * node.
 *
 * Outline is set to "none" to utilise the `.has-focus` state on `c-tile`.
 */
.c-tile__link {
  display: block;
  color: inherit;
  transition: color $tile-animation-speed ease, box-shadow $global-animation-speed-fast ease;
  outline: none;

  .c-tile--square & {
    bottom: 0;
    left: 0;
    position: absolute;
    right: 0;
    top: 0;
  }

  &:focus .c-tile__title,
  &:hover .c-tile__title {
    text-decoration: underline;
  }
}

/* Media
  =========================================== */

/**
 * Container for tile media which takes the top 55% of the tile when used.
 * This usually (but not always) contains a .c-tile-poster.
 *
 * Media and caption pairs should only be used in conjunction with the
 * `c-tile--square` modifier
 */
.c-tile__media {
  overflow: hidden;
  display: block;
  height: 55%;

  /**
   * Hide media below medium on collapsable tiles
   */
  .c-tile--collapsable & {
    @include mq($until: medium) {
      display: none;
    }
  }

  /**
   * Stretch image to fit full height on full tiles
   */
  .c-tile--full & {
    height: auto;
    z-index: 10;
    position: relative;
  }
}

/**
 * A poster is a full bleed image which scales when the lniked tile is hovered.
 */
.c-tile__poster {
  transition: transform $tile-animation-speed-slow ease;
  will-change: transform;

  .c-tile__link:hover & {
    -ms-transform: scale(1.05, 1.05);
    transform: scale(1.05, 1.05);
  }

  /**
   * Align to center on full tiles
   */
  .c-tile--full & {
    display: block;
    margin: 0 auto;
  }
}

/**
 * Captions are needed for media tiles; they add a new background gradient and
 * take up the lower 50% of the tile.
 */
.c-tile__caption {
  position: relative;
  height: 45%;
  z-index: 20;

  /**
   * Sets height to auto below medium on collapsable tiles
   */
  .c-tile--collapsable & {
    @include mq($until: medium) {
      height: auto;
    }
  }
}

/**
 * Overlays are needed for full tiles, overlapping the tile content to take up
 * the lower side of the tile.
 */
.c-tile__overlay {
  position: absolute;
  text-align: center;
  bottom: 0;
  left: 1em;
  right: 1em;
  height: 20%;
  z-index: 20;

  &--large {
    height: 25%;
  }
}

/* Titles
  =========================================== */

/**
 * Large scalable title for large tiles (typically those used in >=50% widths)
 *
 * Normal heading classes e.g. `c-heading-alpha` are more useful in flexible
 * tiles, but square tiles need more specific and scalable headings in order to
 * prevent overflow â€“ hence the explicit font-size and line-height values rather
 * than the `@font-size mixin`.
 */
.c-tile__title {
  position: relative;
  font-size: text(heading-delta);
  line-height: 1.3;

  @include mq($from: medium) {
    font-size: 3.4vw;
  }

  @include mq($from: large) {
    font-size: text(heading-charlie);
  }

  .c-tile--full & {
    font-size: text(heading-delta);

    @include mq($from: medium, $until: large) {
      font-size: 2.8vw;
    }
  }
}

/**
 * Smaller static titles for smaller tiles (usually 33% widths)
 */
.c-tile__small-title {
  position: relative;
  font-size: text(heading-delta);
  line-height: 1.3;

  @include mq($from: medium) {
    font-size: text(text-lead);
  }
}

/* Square modifier
  =========================================== */

/**
 * Forces the tile to keep a square ratio
 */
.c-tile--square {
  height: 0;
  padding-top: 100%;

  /**
   * Collapses square ratio at medium and sets to auto height
   */
  &.c-tile--collapsable {
    @include mq($until: medium) {
      height: auto;
      padding-top: 5px;
    }
  }
}

/* Tile bg hover state
  =========================================== */

/**
 * We used before and after pseudo elements for the tile bg to allow easy
 * z-indexing and avoid issues with nested content.
 * The before element is always used as we always need the bg present.
 * The after element is only used when c-tile__link is used as this is purely
 * used for hover states to get around z-index issues.
 *
 * Tiles all have a class="c-tile__body" or class="c-tile__body c-tile__caption"
 * elements wrapping the main content area.
 * Therefore the caption can be used as an override for the default radial gradient.
 */
.c-tile__body,
.c-tile__caption {
  // Set up shared pseudo element styling
  &::before,
  .c-tile__link &::after {
    bottom: 0;
    content: "";
    left: 0;
    position: absolute;
    right: 0;
    top: 0;
    will-change: transform;
  }

  &::before {
    z-index: -2; // Set below caption to avoid hiding content
  }

  .c-tile__link &::after {
    opacity: 0; // Set initial opacity
    transition: opacity $tile-animation-speed ease;
    z-index: -1; // Set between before and content.
  }

  .c-tile__link:hover &::after {
    opacity: 1; // Set hover opacity
  }
}

// Styling for default tiles
.c-tile__body {
  &::before {
    @include background-gradient($tile-gradient-default, "radial");
  }
  .c-tile__link &::after {
    @include background-gradient($tile-gradient-default-hover, "radial");
  }
}

// Styling for default tiles (with split image)
.c-tile__caption {
  &::before {
    @include background-gradient($tile-gradient-default);
  }
  .c-tile__link &::after {
    @include background-gradient($tile-gradient-default-hover);
  }
}

// Styling for full tiles
.c-tile--full .c-tile__body {
  &::before {
    background: color(white);
  }
  &::after {
    @include background-gradient(mid, vertical-invert, 0% 50%);
  }
}

/* Tile shine
  =========================================== */

/**
 * Tile shine to be applied to a .c-shine component to give the correct positioning
 * when used on a Tile.
 */
.c-tile__shine {
  position: absolute;
  right: 0;
  left: 0;
  z-index: 1;
}

.c-tile__shine--top {
  top: -($global-spacing-unit-small + $tile-border-width);
}

.c-tile__shine--bottom {
  bottom: -($global-spacing-unit-small + $tile-border-width);
}

/* Tile themes
  =========================================== */

@if $included-tile-themes {
  @each $brand in $included-tile-themes {
    // For each brand generate a tile theme class i.e. .t-tile-sky-1
    .c-tile--#{$brand} {

      .c-tile__link:hover {
        color: color(white);
      }

      // Set up style overides
      .c-tile__link .c-tile__body::after {
        @include background-gradient($brand);
      }
    }
  }
}
